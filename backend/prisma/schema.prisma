generator client {
  provider      = "prisma-client-js"
  output        = "../node_modules/.prisma/client"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
  engineType    = "binary"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  role      Role     @default(superadmin)
  tenantId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([tenantId])
}

model Client {
  id           String        @id @default(uuid())
  name         String
  email        String
  phone        String
  notes        String?
  tenantId     String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  appointments Appointment[]

  @@index([tenantId])
}

model Service {
  id           String        @id @default(uuid())
  name         String
  price        Float
  duration     Float
  description  String?
  tenantId     String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  appointments Appointment[]

  @@index([tenantId])
}

model Appointment {
  id        String   @id @default(uuid())
  clientId  String
  serviceId String
  date      DateTime
  status    Status   @default(scheduled)
  notes     String?
  tenantId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  client    Client   @relation(fields: [clientId], references: [id])
  service   Service  @relation(fields: [serviceId], references: [id])

  @@index([tenantId])
  @@index([clientId])
  @@index([serviceId])
}

model playing_with_neon {
  id    Int    @id @default(autoincrement())
  name  String
  value Float? @db.Real
}

enum Role {
  superadmin
  professional
  client
}

enum Status {
  scheduled
  completed
  canceled
}
